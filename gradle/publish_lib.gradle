// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name POM_LICENSE_NAME
            url POM_LICENSE_URL
            distribution POM_LICENSE_DISTRIBUTION
        }
    }
    developers {
        developer {
            id "davidgarcia"
            name "David GarcÃ­a"
            email "david.garcia@inqbarna.com"
        }
    }

    scm {
        url POM_PROJECT_URL
    }
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from "$buildDir/dokka"
}


def printObj = { o ->
    def filtered = ['class', 'active']

    println o.properties
            .sort { it.key }
            .collect { it }
            .findAll { !filtered.contains(it.key) }
            .join('\n')
}

if (project.hasProperty('bintrayUser')) {

    apply plugin: "com.jfrog.bintray"
    apply plugin: 'maven-publish'

    def pubName = "${libraryArtifactId}LibraryPublication"


    afterEvaluate {
        publishing {
            publications {
                "$pubName"(MavenPublication) {
                    groupId = LIBRARY_GROUP_ID
                    artifactId = libraryArtifactId
                    version = libraryVersion
                    artifact androidSourcesJar
                    artifact javadocJar
                    artifact bundleReleaseAar

                    pom {
                        packaging "aar"
                        withXml {
                            def root = asNode()
                            root.children().last() + pomConfig
                            def dependenciesNode = root.appendNode('dependencies')
                            configurations.implementation.allDependencies.each {
                                if (it.name != 'unspecified' && !it.hasProperty('dependencyProject')) {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                    if (it.hasProperty('optional') && it.optional) {
                                        dependencyNode.appendNode('optional', 'true')
                                    }
                                }
                            }

                            if (project.hasProperty("extraDependencies")) {
                                println "Processing extraDependencies for project ${project.name}...."
                                if (project.extraDependencies instanceof List) {
                                    project.extraDependencies.each { dep ->
                                        def dependencyNode = dependenciesNode.appendNode('dependency')
                                        dependencyNode.appendNode('groupId', dep.group)
                                        dependencyNode.appendNode('artifactId', dep.name)
                                        dependencyNode.appendNode('version', dep.version)
                                    }
                                }
                            } else {
                                println "There is no extraDependencies property!!!"
                            }
                        }
                    }
                }
            }
        }

        bintray {
            user = project.property('bintrayUser')
            key = project.property('bintrayKey')
            publications = [pubName]
            dryRun = false
            override = false
            pkg {
                repo = BINTRAY_REPO
                name = libraryArtifactId
                userOrg = BINTRAY_ORGANIZATION
                licenses = [POM_LICENSE]
                vcsUrl = POM_REPO_URL
                version {
                    name = libraryVersion
                }
            }
        }
    }
}
